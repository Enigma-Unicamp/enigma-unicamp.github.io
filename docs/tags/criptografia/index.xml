<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Criptografia on Enigma Unicamp</title>
        <link>http://localhost:1313/tags/criptografia/</link>
        <description>Recent content in Criptografia on Enigma Unicamp</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 07 Oct 2018 00:00:00 +0000</lastBuildDate>
        <atom:link href="http://localhost:1313/tags/criptografia/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Criptografia de chave pública</title>
            <link>http://localhost:1313/posts/asymmetric-encryption/</link>
            <pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/asymmetric-encryption/</guid>
            <description>&lt;p&gt;Há diversos algoritmos criptográficos de chave simétrica modernos e capazes de
garantir comunicação confidencial em um meio inseguro. Dentre eles, o Advanced
Encryption Standard (AES), por exemplo. Porém, esses algoritmos de chave
simétrica exigem que os participantes da comunicação tenham em posse a mesma
chave, denominada &lt;strong&gt;privada&lt;/strong&gt;. Tratamos sobre esse assunto na palestra do dia
12/09/2018 e escrevemos um &lt;a href=&#34;../symmetric-encryption&#34;&gt;post&lt;/a&gt; sobre isso, caso
queira dar uma lida!&lt;/p&gt;
&lt;h3 id=&#34;o-problema-da-distribuição-de-chaves&#34;&gt;O problema da distribuição de chaves&lt;/h3&gt;
&lt;p&gt;Mas então, como combinar chaves para realizar uma comunicação segura? Durante
muito tempo isso foi feito pessoalmente. As pessoas se encontravam e combinavam
uma chave, ou confiavam a um mensageiro essa tarefa. Outra alternativa era
utilizar um canal seguro, já criptografado. Essas alternativas são custosas e
pouco viáveis. Mas será que dá para fazer melhor?&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Há diversos algoritmos criptográficos de chave simétrica modernos e capazes de
garantir comunicação confidencial em um meio inseguro. Dentre eles, o Advanced
Encryption Standard (AES), por exemplo. Porém, esses algoritmos de chave
simétrica exigem que os participantes da comunicação tenham em posse a mesma
chave, denominada <strong>privada</strong>. Tratamos sobre esse assunto na palestra do dia
12/09/2018 e escrevemos um <a href="../symmetric-encryption">post</a> sobre isso, caso
queira dar uma lida!</p>
<h3 id="o-problema-da-distribuição-de-chaves">O problema da distribuição de chaves</h3>
<p>Mas então, como combinar chaves para realizar uma comunicação segura? Durante
muito tempo isso foi feito pessoalmente. As pessoas se encontravam e combinavam
uma chave, ou confiavam a um mensageiro essa tarefa. Outra alternativa era
utilizar um canal seguro, já criptografado. Essas alternativas são custosas e
pouco viáveis. Mas será que dá para fazer melhor?</p>
<h3 id="um-pouco-de-história-diffie-hellman-merkle">Um pouco de história: Diffie-Hellman-Merkle</h3>
<center>
<figure><img src="/img/posts/asymmetric-encryption/diffiehellmanmerkle.jpg">
</figure>

Ralph Merkle, Martin Hellman e Whitfield Diffie, da esquerda para a direita. Os
 inventores do conceito de chave pública
</center>
<p>Na década de 70, a Internet começava a engatinhar, com o desenvolvimento da
ARPANET pelos militares e cientistas das universidades norte-americanas. Atento
ao cenário, o matemático Whitfield Diffie antecipava o advento da Internet como
a conhecemos, com muitas pessoas utilizando computadores interconectados e
trocando mensagens. Muitas delas confidenciais.  Mas como a privacidade delas
seria mantida? A troca de chaves privadas já era um problema, e isso se
agravaria no futuro. Foi pensando nisso que Diffie começou a buscar
desenfreadamente por uma solução.</p>
<p>Ao ouvir falar sobre Martin Hellman, que também estava muito interessado no
problema, Diffie pegou seu carro e atravessou os Estados Unidos para que
pudessem conversar. Diffie logo abandonou seu emprego e se inscreveu para entrar
na graduação de Stanford e pesquisar com Hellman, que lecionava por lá.</p>
<p>Na mesma época, Merkle tentava se aprofundar no problema em um grupo de estudos
do qual participava, também em Stanford. Porém, seu professor não viu muito
futuro no tema, dizendo que não fazia sentido. Quando ficou sabendo sobre Diffie
e Hellman, se aproximou dos dois e começou a fazer pesquisa com eles. Durante
muito tempo buscaram por uma solução para o problema, o que criou bases para
que, em 1975, Hellman a encontrasse.</p>
<h3 id="a-troca-de-chaves-de-diffie-hellman-merkle">A troca de chaves de Diffie-Hellman-Merkle</h3>
<p>Em 1976, Martin Hellman e Whitfield Diffie (com contribuições de Ralph Merkle)
publicaram o famoso artigo <a href="https://ee.stanford.edu/~hellman/publications/24.pdf">New Directions in
Cryptography</a>. Nesse
artigo, uma maneira muito interessante de combinar chaves públicas em um canal
de comunicação inseguro é proposto. Além disso, também apresentaram o conceito
de <strong>chave pública</strong>, apesar de não terem encontrado um bom algoritmo para isso.</p>
<p>Em 1997, foi revelado que a agência de inteligência britânica já havia
desenvolvido um esquema para a combinação de chaves em meios inseguros. Porém,
isso foi mantido em segredo durante todo esse tempo. Há algumas teorias de que
um dos militares vazou essas informações para Hellman, mas não há provas.
Agora chega de blablabla e vamos entender como isso é possível.</p>
<h3 id="uma-explicação-simplificada">Uma explicação simplificada</h3>
<center>
<figure><img src="/img/posts/asymmetric-encryption/colors.png" width="300">
</figure>

Ideia do método proposto por Diffie, Hellman e Merkle
</center>
<p>Para facilitar a compreensão do algoritmo de troca de chaves de
Diffie-Hellman-Merkle, podemos utilizar <strong>cores</strong>. Vamos supor que Alice e Bob
queiram combinar uma chave criptográfica, mas Eve esteja realizando um ataque na
conexão insegura que eles utilizam. Então, Alice e Bob combinam uma cor pública
qualquer, ou seja, uma informação que Eve também pode descobrir:
<strong>amarelo</strong>. Agora, cada um escolhe uma cor secreta. Alice escolhe <strong>laranja</strong> e
Bob escolhe <strong>azul</strong>. Depois, eles misturam a cor secreta com o amarelo. Alice
obtém um balde de tinta <strong>laranja claro</strong> e Bob <strong>azul claro</strong>. Então, eles
trocam essas misturas através do meio inseguro. Finalmente, basta eles
misturarem a cor secreta que possuem com a mistura que receberam. E pronto, eles
conseguiram uma cor secreta, que só eles dois conhecem. Essa seria a chave
privada que eles obtiveram, ainda que utilizando uma conexão insegura.</p>
<p>Segue um <a href="https://www.youtube.com/watch?v=NmM9HA2MQGI">vídeo</a> com uma
demonstração do algoritmo utilizando tintas.</p>
<p>Mas e se Eve, atacante do canal inseguro, conseguisse interceptar os baldes com:
amarelo, azul claro e laranja claro? Não adiantaria, pois se misturasse tudo,
teríamos: 2x amarelo, 1x azul e 1x laranja. O segredo é composto por: 1x
amarelo, 1x azul e 1x laranja. A única forma de obter o segredo é pegar o balde
com azul claro e tentar separar a cor pública, amarelo, da cor privada, azul. E
depois fazer o mesmo para o balde com laranja claro: tentar separar o amarelo do
laranja. Agora veremos um pouco de aritmética modular para que, matematicamente,
verificarmos que é muito difícil &ldquo;separar a cor pública da cor privada&rdquo;.</p>
<h3 id="aritmética-modular">Aritmética modular</h3>
<p>Apesar do nome chique, aritmética modular é uma parte da matemática que temos
muita intimidade; de fato, usamos ela <strong>todo dia</strong>! De maneira simples,
operações modulares são aquelas onde &ldquo;voltamos para o começo&rdquo; depois de um certo
número ser atingido - ou seja, depois de toda conta, dividimos o resultado por
um certo número e ficamos apenas com o <strong>resto</strong> dele.</p>
<p>Conseguiu imaginar algo cotidiano que funciona assim? Nós fazemos essas contas
todo dia <em>ao olhar para o relógio</em>. Pense: Se são 9h da manhã e você tem um
compromisso dali a quatro horas, como você descobre que horas é o compromisso
num relógio (analógico)? Primeiro fazemos <code>9+4 = 13</code>, mas o relógio só conta
até 12 horas. Por isso, ao passar de 12h, <em>voltamos para o começo</em> e começamos a
andar novamente no relógio. Como já gastamos 3 horas chegando de 9h até 12h, nos
falta contar apenas mais 1h; portanto, o compromisso é à 1h da tarde.</p>
<p><br/><center>
<figure><img src="/img/posts/asymmetric-encryption/soma_relogio.png" width="640">
</figure>
</p>
</center><br/>
<p>Podemos pensar nisso usando divisão, como citamos acima: Fazemos 9+4 = 13, e
então <em>dividimos o resultado por 12</em>. Como 13 = 12.1 + 1, o <strong>resto</strong> da divisão
de 13 por 12 é 1 - que é exatamente o número que procuramos! Geralmente
representamos essa operação de dividir e pegar o resto como <strong>módulo</strong> (daí o
nome aritmética modular), e escrevemos essa relação como<code>13 (mod 12) ≡ 1 (mod 12)</code>. Note que não usamos o símbolo de <code>=</code> nesse caso, porque não
são de fato iguais, apenas quando fazemos esse módulo específico; ou seja, são
<strong>congruentes</strong> módulo 12. Se o número fosse 7, <code> 13 (mod 7) ≡ 6 (mod 7)</code>,
então é importante ressaltar a diferença!</p>
<p>Podemos fazer diversas operações que conhecemos com módulo: adição, subtração,
multiplicação, exponenciação, até mesmo fazer polinômios! Só precisamos tomar
cuidado com coisas como divisão e raíz, porque essas só podem ser feitas <em>em
alguns casos específicos</em>.</p>
<p>Uma última coisa interessante de se notar antes de passarmos para a matemática
do algoritmo de Diffie-Hellman-Merkle é o que acontece com os números quando
começamos a fazer <em>exponenciação modular</em>. Vamos começar elevando o 2 a
diferentes potências no nosso relógio:</p>
<p>2<sup>1</sup> (mod 12) = 2 (mod 12) ≡ 2 (mod 12)
<br>2<sup>2</sup> (mod 12) = 4 (mod 12) ≡ 4 (mod 12)
<br>2<sup>3</sup> (mod 12) = 8 (mod 12) ≡ 8 (mod 12)
<br>2<sup>4</sup> (mod 12) = 16 (mod 12) ≡ 4 (mod 12)
<br>2<sup>5</sup> (mod 12) = 32 (mod 12) ≡ 8 (mod 12)
<br>2<sup>6</sup> (mod 12) = 64 (mod 12) ≡ 4 (mod 12)
<br><strong>&hellip;</strong></p>
<p>Chega um momento onde começamos a obter sempre os mesmos números. Isso é de
certa forma esperado - oras, se estamos falando de um número <em>finito</em> de
resultados possíveis (mais especificamente, no caso de <code>mod n</code> de 1 a n-1),
então é claro que em algum momento vamos repetir números. Mas apesar de no nosso
relógio termos 12 possibilidades, a partir da potência 3, ficamos repetindo
entre apenas 2 números, 4 e 8. Agora, um fato interessante: Se nosso número <code>n</code>,
no qual fazemos essas operações de módulo, for primo, temos <em>certeza</em> de que
haverão alguns números (o número exato, para os interessados, sendo o resultado
da função <a href="https://pt.wikipedia.org/wiki/Fun%C3%A7%C3%A3o_totiente_de_Euler">phi de Euler</a> para <code>n-1</code>) que passarão por
<strong>todos</strong> os números de 1 até n-1, numa ordem <strong>aparentemente aleatória</strong>. E coisas
&ldquo;aparentemente aleatórias&rdquo; são muito, muito boas pra gente usar na criptografia.</p>
<p>Como um último exemplo, faça as potências de 2 agora usando <code>mod 13</code>. A
sequência dos 13 primeiros números agora fica da seguinte forma:</p>
<p>{2, 4, 8, 3, 6, 12, 11, 9, 5, 10, 7, 1, 2}</p>
<p>Demos uma volta completa passando por todos números entre 1 e 12! E mais do que
isso, se alguém te perguntasse &ldquo;Qual potência de 2 resulta em 10, módulo 13?&rdquo;,
você teria poucas opções para responder isso senão <em>ir fazendo as contas na mão
até chegar lá</em>. Isso é conhecido como <strong>problema do logaritmo discreto</strong>, um
problema reconhecidamente difícil de se resolver mesmo pelos nossos computadores
atuais, e ele é utilizado não só no algoritmo a seguir como também no <strong>RSA</strong>,
sobre o qual falaremos mais pra frente.</p>
<h3 id="voltando-algoritmo-de-diffie-hellman-merkle-matematicamente">Voltando&hellip; algoritmo de Diffie-Hellman-Merkle matematicamente</h3>
<p>Basicamente, o que acontece é que uma função difícil de calcular sua inversa
deve ser encontrada. Ou seja, uma função <code>f</code> tal que, dado um <code>x</code>,
calcular <code>f(x) = y</code> é fácil. Mas dado um <code>y</code>, é muito difícil
encontrar <code>x</code> de uma maneira eficiente. Então, eles tiveram a seguinte ideia:</p>
<ol>
<li>Alice escolhe 2 números <strong>g</strong> e <strong>p</strong> (com algumas características especiais)
e os envia para Bob.</li>
<li>Alice escolhe um valor secreto <strong>a</strong> tal que 1 &lt;= a &lt; p, calcula</br><strong>A =
g<sup>a</sup> mod p</strong> e envia o resultado para Bob.</li>
<li>Da mesma forma, Bob escolhe um valor secreto <strong>b</strong> tal que</br> 1 &lt;= b &lt; p,
calcula <strong>B = g<sup>b</sup> mod p</strong> e o envia para Alice.</li>
<li>Agora, Alice calcula <strong>B<sup>a</sup> mod p</strong> e Bob calcula
<strong>A<sup>b</sup> mod p</strong>.</li>
</ol>
<p>Talvez não pareça, mas <strong>B<sup>a</sup> mod p</strong> ≡ <strong>A<sup>b</sup> mod p</strong>.
Observe:</p>
<pre><center>
B<sup>a</sup> mod p ≡ A<sup>b</sup> mod p
(g<sup>b</sup> mod p)<sup>a</sup> mod p ≡ (g<sup>a</sup> mod p)<sup>b</sup> mod p
(g<sup>ba</sup> mod p) ≡ (g<sup>ab</sup> mod p)
</center></pre>
<p>Isso é <strong>MUITO</strong> legal. Alice e Bob chegaram em um mesmo valor sem que tenham
enviado o valor secreto de um para o outro. Mas como garantimos que isso é
seguro de um possível atacante?</p>
<h3 id="tentativa-de-ataque">Tentativa de ataque</h3>
<p>Vamos supor que Eve esteja atacando a conexão insegura de Alice e Bob e tenha
obtido <strong>p</strong> e <strong>q</strong>.  Além disso, Eve obtém <strong>A</strong> e <strong>B</strong>, ambos transmitidos
pela rede. Para obter o valor que Alice e Bob calcularam no acordo (ou seja, a
chave criptográfica), <strong>a</strong> e <strong>b</strong> são necessários. A única forma de obtê-los é
a partir de  <strong>A = g<sup>a</sup> mod p</strong> e <strong>B = g<sup>b</sup> mod p</strong>. Se não
fosse o <strong>mod</strong> na fórmula, bastaria aplicar <strong>log</strong> em ambos os lados da
equação. Mas, como já vimos, o <strong>mod</strong> atrapalha tudo.</p>
<p>Segue um <a href="https://www.youtube.com/watch?v=Yjrfm_oRO0w">vídeo</a> com uma explicação
do porque é difícil calcular o logaritmo com o mod na fórmula.</p>
<p>Mas há uma outra forma de explorar vulnerabilidades no algoritmo. Um ataque de
<em>man-in-the-middle</em> é factível. Eve pode se passar por Bob, e combinar uma chave
<strong>A</strong> com Alice, e depois, se passar por Alice e combinar uma chave <strong>B</strong> com
Bob. Assim, quando Bob for enviar uma mensagem para Alice, na verdade vai enviar
para Eve, que vai decriptar com a chave <strong>B</strong>. Depois, Eve encripta a mensagem
com a chave <strong>A</strong> e envia para Alice.</p>
<h3 id="outro-problema-do-algoritmo">Outro problema do algoritmo</h3>
<p>Já falamos sobre uma maneira de combinar chaves simétricas em um meio inseguro.
Mas por que Diffie, Hellman e Merkle não pararam por aí? Porque o algoritmo deles
não é perfeito. Há algumas limitações. Por exemplo, vamos supor que Alice nunca
tenha entrado em contato com Bob, e eles vivem em regiões que possuem
fusos-horários distoantes. Enquanto Alice está acordada, Bob está dormindo, e
vice-versa. Assim, se Alice for enviar um e-mail para Bob, ela precisará enviar
uma mensagem para Bob, querendo combinar uma chave. Depois que Bob acordar, ele
realizará sua parte do acordo, enviando uma mensagem para Alice. Finalmente,
quando Alice acordar ela terá a chave privada, podendo enviar o e-mail em
segurança para Bob.</p>
<h3 id="chave-pública">Chave pública</h3>
<p>Como já dissemos, Diffie, Hellman e Merkle também propuseram o conceito por trás
dos algoritmos criptográficos assimétricos, ou seja, dos algoritmos de chave
pública. Vamos entender qual é a ideia.</p>
<p>Nesses algoritmos, temos <strong>pares de chaves</strong>. Uma <strong>chave pública E</strong>, utilizada
para encriptar as mensagens, e outra <strong>chave privada D</strong>, para decriptar as
mensagens encriptadas com E. Apesar de relacionadas, é impraticável atacar E
para obter D. Assim, o detentor de um par de chaves pode disponibilizar a chave
pública para todos. Qualquer mensagem encriptada com essa chave só pode ser
decriptada por ele, que possui a chave privada correspondente. O primeiro desses
algoritmos - o <strong>RSA</strong> - foi proposto por <strong>Ron Rivest, Adi Shamir, e Len
Adleman</strong>, um ano após a publicação do famoso artigo de Diffie e Hellman.</p>
<h3 id="rsa">RSA</h3>
<p>Apesar de ser muito famoso e ser utilizado até hoje, a ideia central do RSA é
bem mais simples do que é de se esperar. É claro, no mundo real temos várias
outras coisas para se levar em conta então as coisas ficam bem mais complexas,
mas a essência do RSA é a seguinte:</p>
<h5 id="geração-de-chaves">Geração de chaves</h5>
<ol>
<li>Gere dois números primos distintos, aleatórios e grandes, <code>p</code> e <code>q</code></li>
<li>Calcule <strong>N = p.q</strong></li>
<li>Calcule <strong>Φ = (p-1).(q-1)</strong></li>
<li>Escolha um número <code>e</code>, 1 &lt; e &lt; Φ, tal que mdc(e,Φ) = 1.</li>
<li>A operação passada garante que existe um número <em>único</em> <code>d</code> tal que <strong>e
.d ≡ 1 (mod Φ)</strong>, então calculamos ele.</li>
</ol>
<p>Temos assim um par de números que é nossa <strong>chave pública</strong> <code>(e, N)</code> e um número
que é nossa <strong>chave privada</strong> <code>(d)</code>. Não vamos entrar em muitos detalhes aqui,
mas saiba que os números <code>e</code> e <code>d</code>, escolhidos dessa forma, garantem que
para qualquer <code>x</code> entre 1 e N-1,<br/>
<strong>x<sup>e<sup>d</sup></sup> mod N ≡ x mod N</strong>.
Ainda parece estranho, não é mesmo? Sabendo de tudo isso, vamos para os
algoritmos de encriptação e decriptação em si, que vão fazer as coisas fazerem
muito mais sentido.</p>
<h5 id="encriptação-com-o-rsa">Encriptação com o RSA</h5>
<ol>
<li>Obtenha a chave pública do seu destinatário <code>(e, N)</code></li>
<li>Represente sua mensagem <code>m</code> como um inteiro entre 1 e N-1. (PS: podemos
olhar os bits de uma mensagem como um numerão, por exemplo!)</li>
<li>Calcule <strong>c = m<sup>e</sup> mod N</strong></li>
</ol>
<p>E é isso! <code>c</code> é agora sua mensagem cifrada, e alguém que queira descobrir
sua mensagem teria que saber que raio de número <code>m</code> elevado a <code>e</code> resulta
em  <code>c</code> quando isso é feito <code>mod N</code>; e como vimos, isso é uma coisa muito
complicada de se resolver. Vamos agora para a decriptação:</p>
<h5 id="decriptação-com-o-rsa">Decriptação com o RSA</h5>
<ol>
<li>Utilize sua chave privada <code>d</code> para calcular <strong>m = c<sup>d</sup> mod N</strong>.</li>
</ol>
<p>E acabou! &hellip;É sério, acabou mesmo. Falei que era simples! Do jeito que as
chaves foram escolhidas, como <strong>c = m<sup>e</sup> mod N</strong>, então <br/>
<strong>m = c<sup>d</sup> mod N = m<sup>e<sup>d</sup></sup> mod N ≡ m mod N</strong>, e como
a mensagem <code>m</code> está entre 1 e N-1, a operação de módulo não vai mudar nada
nela, e ela vai chegar intacta.</p>
<p>E apesar da simplicidade, é esse mesmo algoritmo - com algumas mudanças para
evitar alguns outros tipos de ataque, como ataques de canal lateral - que é
usado para <strong>quase tudo</strong> que usa criptografia de chave pública hoje em dia.</p>
<p>Esperamos que tenha gostado e se impressionado tanto quanto a gente, porque
criptografia é um negócio <strong>muito legal</strong>!</p>
]]></content>
        </item>
        
        <item>
            <title>Criptografia de chave simétrica</title>
            <link>http://localhost:1313/posts/symmetric-encryption/</link>
            <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/symmetric-encryption/</guid>
            <description>&lt;center&gt;
_[Slides](https://enigma.ic.unicamp.br/talks/simetrico/simetrico.pdf)
usados na palestra do dia 12/09/18, tratando sobre o mesmo assunto que este
post_
&lt;/center&gt;
&lt;p&gt;Se engana quem pensa que a criptografia surgiu recentemente. Apesar de ter se
modernizado muito com o advento dos computadores, essa ciência já existe há
milhares de anos, visto que o sigilo de informações não é uma necessidade
recente. Na Roma Antiga, o ditador Júlio César (personagem crucial na transição
da República Romana para o Império Romano) utilizava cifras para se
comunicar com outros militares e governantes. É daí que vem o nome da famosa
&lt;strong&gt;Cifra de César&lt;/strong&gt;.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<center>
_[Slides](https://enigma.ic.unicamp.br/talks/simetrico/simetrico.pdf)
usados na palestra do dia 12/09/18, tratando sobre o mesmo assunto que este
post_
</center>
<p>Se engana quem pensa que a criptografia surgiu recentemente. Apesar de ter se
modernizado muito com o advento dos computadores, essa ciência já existe há
milhares de anos, visto que o sigilo de informações não é uma necessidade
recente. Na Roma Antiga, o ditador Júlio César (personagem crucial na transição
da República Romana para o Império Romano) utilizava cifras para se
comunicar com outros militares e governantes. É daí que vem o nome da famosa
<strong>Cifra de César</strong>.</p>
<p>Mas afinal, o que é criptografia?</p>
<ul>
<li>Conjunto de princípios e técnicas utilizados para garantir comunicação
segura, ainda que na presença de possíveis atacantes</li>
<li>Além de garantir sigilo da informação, através da criptografia também é
possível garantir <strong>autenticidade</strong>, através de assinaturas digitais</li>
<li>Então, informalmente podemos dizer que a criptografia é utilizada para
contar segredos em lugares públicos, <strong>falar sobre assuntos sigilosos por meios
não confiáveis</strong></li>
</ul>
<p>Os algoritmos criptográficos que veremos hoje são denominados
<strong>simétricos</strong>. Isso significa que para encriptar e decriptar mensagens a partir
deles, a mesma chave (denominada <strong>chave simétrica</strong>) é utilizada. Para deixar
mais claro, vamos supor que <strong>Alice</strong> e <strong>Bob</strong> queiram trocar mensagens
sigilosas em um canal inseguro, bem como é o caso da Internet.</p>
<p>Para isso, ambos podem utilizar um desses algoritmos criptográficos e encriptar
as mensagens, antes de enviá-las. Porém, eles precisam combinar uma chave e
guardá-la com muito sigilo. Como fazer isso utilizando a Internet? Um atacante
(que chamaremos de <strong>Eve</strong>) pode interceptar a conexão e obter a chave, sendo capaz
de decifrar qualquer mensagem enviada por um dos dois. Esse é um problema muito
delicado, mas deixaremos para explicar em detalhes numa futura palestra/postagem
sobre <strong>algoritmos criptográficos de chave assimétrica</strong>. Então, vamos supor que
eles tenham se encontrado em um bar e combinado a chave pessoalmente, antes do
início da troca de mensagens.</p>
<p>Antes de enviar uma mensagem <strong>M</strong> para Bob, Alice utiliza o algoritmo
criptográfico <strong>E</strong>, passando como parâmetros a chave privada <strong>K</strong> e a mensagem
<strong>M</strong>. Agora ela pode enviar a mensagem encriptada <strong>E(M, K)</strong> para Bob sem se
preocupar (caso o algoritmo seja bom), porque Eve até pode interceptar a
mensagem, mas ela estará ininteligível. Bob, em posse da mesma chave <strong>K</strong> que
Alice, pode utilizar o algoritmo <strong>D</strong> que decripta a mensagem, passando como
parâmetro a chave <strong>K</strong> e obtendo a mensagem <strong>M</strong> em claro.</p>
</br>
<center>
<figure><img src="/img/posts/symmetric-encryption/alice-and-bob.svg">
</figure>

Esquema criptográfico de chave simétrica. Alice, Bob e Eve são nomes muito
utilizados nos livros de criptografia
</center>
</br>
<p>Essa é a ideia principal dos algoritmos de chave simétrica. Agora, veremos
alguns exemplos muito famosos da criptografia clássica (fase anterior ao advento
e popularização dos computadores). Atualmente, esses algoritmos são mais
utilizados para o estudo da criptografia, e <strong>não são seguros</strong>. Porém, é muito
importante entender como eles funcionam e quais são suas falhas.</p>
<br/>
<h3 id="cifra-de-césar">Cifra de César</h3>
<center>
<figure><img src="/img/posts/symmetric-encryption/caesar1.png" width="220" height="160">
</figure>

</center>
<p><em>Usamos ela em um dos desafios iniciais do <a href="https://decifre.me">decifre.me!</a></em>
<em>Segue a <a href="../resolvendo0">resolução</a> dos 3 primeiros desafios</em></p>
<p>A Cifra de César é um dos algoritmos criptográficos mais simples. É uma cifra
de substituição em que cada letra é trocada por outra que está a um número
fixo de posições de distância. A chave é simplesmente esse número. Por exemplo,
se a chave for <strong>K=4</strong>, a letra A será substituída por E. Seguindo essa
lógica, o texto <strong>enigma</strong> seria transformado em <strong>IRMKQE</strong>.</p>
<center>
<figure><img src="/img/posts/symmetric-encryption/caesar-scheme.png" width="420">
</figure>

Esquema demonstrando a Cifra de César para **K=3**
</center>
<p>É fácil perceber que só existem 25 chaves para essa cifra, já que nosso
alfabeto possui 26 letras. Logo, para quebrá-la, podemos executar o algoritmo
com todas as opções de chave disponíveis até encontrarmos um texto que fique
coerente.</p>
<center>
<figure><img src="/img/posts/symmetric-encryption/caesar2.png" width="220" height="160">
</figure>
 _Texto cifrado com a Cifra de César, para K=13_</center>
<br/>
<h3 id="cifra-de-substituição-com-permutação-do-alfabeto">Cifra de Substituição com Permutação do Alfabeto</h3>
<p>Neste modelo, permutamos o alfabeto, gerando um alfabeto de substituição. Então, a
letra <strong>a</strong> deve ser substituída por <strong>X</strong>, a letra <strong>x</strong> por <strong>J</strong>, e assim por
diante. Há uma variação dessa técnica em que as letras também podem ser
substituídas por símbolos não pertencentes ao alfabeto. Por exemplo, <strong>a</strong> por
<strong>%</strong>, <strong>x</strong> por <strong>#</strong>, etc.</p>
<p>Por exemplo, podemos criar um alfabeto da seguinte forma:</p>
<center>
<table>
  <thead>
      <tr>
          <th style="text-align: left">a</th>
          <th style="text-align: left">b</th>
          <th style="text-align: left">c</th>
          <th style="text-align: left">d</th>
          <th style="text-align: left">e</th>
          <th style="text-align: left">f</th>
          <th style="text-align: left">g</th>
          <th style="text-align: left">h</th>
          <th style="text-align: left">i</th>
          <th style="text-align: left">j</th>
          <th style="text-align: left">k</th>
          <th style="text-align: left">l</th>
          <th style="text-align: left">m</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">P</td>
          <td style="text-align: left">H</td>
          <td style="text-align: left">Q</td>
          <td style="text-align: left">G</td>
          <td style="text-align: left">I</td>
          <td style="text-align: left">U</td>
          <td style="text-align: left">M</td>
          <td style="text-align: left">E</td>
          <td style="text-align: left">A</td>
          <td style="text-align: left">Y</td>
          <td style="text-align: left">L</td>
          <td style="text-align: left">N</td>
          <td style="text-align: left">O</td>
      </tr>
  </tbody>
</table>
<table>
  <thead>
      <tr>
          <th style="text-align: left">n</th>
          <th style="text-align: left">o</th>
          <th style="text-align: left">p</th>
          <th style="text-align: left">q</th>
          <th style="text-align: left">r</th>
          <th style="text-align: left">s</th>
          <th style="text-align: left">t</th>
          <th style="text-align: left">u</th>
          <th style="text-align: left">v</th>
          <th style="text-align: left">w</th>
          <th style="text-align: left">x</th>
          <th style="text-align: left">y</th>
          <th style="text-align: left">z</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">F</td>
          <td style="text-align: left">D</td>
          <td style="text-align: left">X</td>
          <td style="text-align: left">J</td>
          <td style="text-align: left">K</td>
          <td style="text-align: left">R</td>
          <td style="text-align: left">C</td>
          <td style="text-align: left">V</td>
          <td style="text-align: left">S</td>
          <td style="text-align: left">T</td>
          <td style="text-align: left">Z</td>
          <td style="text-align: left">W</td>
          <td style="text-align: left">B</td>
      </tr>
  </tbody>
</table>
</center>
<p>Vamos pegar essa frase  (acentos removidos propositalmente) como exemplo:</p>
<blockquote>
<p>Os primeiros ativistas no final dos anos 1980, com o embrionario
movimento dos Cypherpunks, ja atentavam para falta de seguranca em torno
dos dados trocados na internet.</p>
</blockquote>
<p>Cifrando com esse alfabeto, teríamos:</p>
<blockquote>
<p>DR XKAOIAKDR PCASARCPR FD UAFPN GDR PFDR 1980, QDO D IOHKADFPKAD
ODSAOIFCD GDR QWXEIKXVFLR, YP PCIFCPSPO XPKP UPNCP GI RIMVKPFQP IO CDKFD
GDR GPGDR CKDQPGDR FP AFCIKFIC.</p>
</blockquote>
<h4 id="quebrando-a-subsituição">Quebrando a subsituição</h4>
<p>E como atacamos isto? Dessa vez, temos muitas mais opções de chave do que na
Cifra de César. Como cada variação do alfabeto é uma chave válida, temos <strong>26!</strong>
chaves! Isso é algo perto de 4 x 10^26. Logo, atacar esse problema com força bruta no número de chaves não
parece uma boa alternativa. A fraqueza dessa cifra está em outro ponto. Mesmo se
removêssemos espaços, números e pontuação, o texto ainda manteria uma estrutura
muito próxima daquela existente no texto original, no que diz respeito ao
histograma dos caracteres (a frequência em que eles ocorrem no texto). Quem
percebeu isso foi um <a href="https://en.wikipedia.org/wiki/Al-Kindi">religioso árabe</a>
do século IX, enquanto tentava descobrir a data dos textos do Alcorão segundo a
frequência de suas letras.</p>
<p>A Língua Portuguesa apresenta uma frequência média de ocorrência das letras nos
textos.  Essa frequência segue uma distribuição. Isso ocorre por causa da <a href="https://en.wikipedia.org/wiki/Zipf's_law">Lei
de Zipf</a>, que na verdade ocorre em
<a href="https://pt.wikipedia.org/wiki/Frequ%C3%AAncia_de_letras">todos os idiomas</a> e
não afeta somente a frequência das letras, mas também das palavras. Aliás, afeta
muitas coisas além de linguística. Recomendo <a href="https://www.youtube.com/watch?v=fCn8zs912OE">ver este
vídeo</a> se quiser saber mais.</p>
<p>Este é o histograma da língua portuguesa:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Letra</th>
          <th style="text-align: left">Frequência</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">a</td>
          <td style="text-align: left">15%</td>
      </tr>
      <tr>
          <td style="text-align: left">e</td>
          <td style="text-align: left">13%</td>
      </tr>
      <tr>
          <td style="text-align: left">o</td>
          <td style="text-align: left">11%</td>
      </tr>
      <tr>
          <td style="text-align: left">s</td>
          <td style="text-align: left">8%</td>
      </tr>
      <tr>
          <td style="text-align: left">r</td>
          <td style="text-align: left">7%</td>
      </tr>
      <tr>
          <td style="text-align: left">i</td>
          <td style="text-align: left">6%</td>
      </tr>
      <tr>
          <td style="text-align: left">n</td>
          <td style="text-align: left">5%</td>
      </tr>
      <tr>
          <td style="text-align: left">d</td>
          <td style="text-align: left">5%</td>
      </tr>
      <tr>
          <td style="text-align: left">m</td>
          <td style="text-align: left">5%</td>
      </tr>
      <tr>
          <td style="text-align: left">u</td>
          <td style="text-align: left">5%</td>
      </tr>
      <tr>
          <td style="text-align: left">&hellip;</td>
          <td style="text-align: left">&hellip;</td>
      </tr>
  </tbody>
</table>
<p>Vamos tentar quebrar o seguinte texto (veja completo <a href="https://enigma.ic.unicamp.br/talks/simetrico/texto.txt">aqui</a>):</p>
<blockquote>
<p>ZG GAHLAL IVGU XGAZL IVG L WJMXBSHJLEML ZVJHMV JGWGABGUGABG. LXGZLJ  NG  BGJ<br>
ZG  USNGJAMKLNS  UVMBS  WSU  S  LNDGABS  NSZ WSUXVBLNSJGZ,  GZZL  WMGAWML  OL<br>
GPMZBG  YL  UMRYLJGZ  NG  LASZ, DMZBS  IVG  S  ZMHMRS  NG  MAESJULWSGZ  ALS  G<br>
VUL  AGWGZZMNLNG JGWGABG&hellip;.</p>
</blockquote>
<p>Se fizermos um histograma desse texto, obteremos a seguinte tabela:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Letra</th>
          <th style="text-align: left">Frequência</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">L</td>
          <td style="text-align: left">13.55%</td>
      </tr>
      <tr>
          <td style="text-align: left">G</td>
          <td style="text-align: left">12.23%</td>
      </tr>
      <tr>
          <td style="text-align: left">S</td>
          <td style="text-align: left">8.47%</td>
      </tr>
      <tr>
          <td style="text-align: left">Z</td>
          <td style="text-align: left">8%</td>
      </tr>
      <tr>
          <td style="text-align: left">J</td>
          <td style="text-align: left">7.81%</td>
      </tr>
      <tr>
          <td style="text-align: left">M</td>
          <td style="text-align: left">7.81%</td>
      </tr>
      <tr>
          <td style="text-align: left">U</td>
          <td style="text-align: left">5.83%</td>
      </tr>
      <tr>
          <td style="text-align: left">&hellip;</td>
          <td style="text-align: left">&hellip;</td>
      </tr>
  </tbody>
</table>
<p>Como é uma cifra de subsituição simples, a letra que foi substituída por <code>L</code>
era a letra que mais aparecia no texto original. Sabendo que o texto original
estava em português, existem muitas chances de <code>L</code> ser a letra <code>a</code>, <code>G</code> ser a
letra <code>e</code> e <code>S</code> ser <code>o</code>. Quanto maior o texto, mais isso é verdade, porque mais
se aproxima da frequência média. Em textos muito pequenos essa análise não irá
funcionar muito bem. As letras de menor ocorrência (<code>x</code>, <code>k</code>, <code>w</code>, <code>y</code>) serão
as que ficarão mais longe da posição correta, mas isso não é problema para nós,
já que as cinco primeiras letras já cobrem 50% do texto. A
relação entre o histograma do nosso texto e o da língua portuguesa não está
perfeita, mas substituindo corretamente apenas as cinco primeiras letras
obtemos (letras em maísculo ainda estão cifradas e minísculas estão em claro):</p>
<blockquote>
<p>se eAHaAa IVeU XeAsa IVe a WrMXBoHraEMa sVrHMV reWeABeUeABe. aXesar Ne Ber se
UoNerAMKaNo UVMBo WoU o aNDeABo Nos WoUXVBaNores, essa WMeAWMa Oa ePMsBe Ya
UMRYares Ne aAos, DMsBo IVe o sMHMRo Ne MAEorUaWoes Aao e VUa AeWessMNaNe
reWeABe.</p>
</blockquote>
<p>Apareceu um <code>essa</code>, o que indica que estamos no caminho certo! Ainda não está
perfeito, mas algumas palavras estão chegando perto. Se repararmos nas palavras
quase completas, encontramos um trecho quase completo:</p>
<blockquote>
<p>se eAHaAa IVeU XeAsa IVe a WrMXBoHraEMa sVrHMV reWeABeUeABe. <strong>aXesar Ne
Ber</strong> se UoNerAMKaNo UVMBo WoU o aNDeABo Nos WoUXVBaNores, essa WMeAWMa Oa
ePMsBe Ya UMRYares Ne aAos, DMsBo IVe o sMHMRo Ne MAEorUaWoes Aao e VUa
AeWessMNaNe reWeABe.</p>
</blockquote>
<p><strong>aXesar Ne Ber</strong> se parece com &ldquo;apesar de ser&rdquo;, mas como o <code>s</code> já foi
resolvido pela letra <code>Z</code>, vamos supor que seja &ldquo;apesar de ter&rdquo;. Dessa forma,
resolvemos mais três letras:</p>
<ul>
<li><code>X</code> = <code>p</code></li>
<li><code>N</code> = <code>d</code></li>
<li><code>B</code> = <code>t</code></li>
</ul>
<p>Substituindo mais essas letras, o texto começa a ter forma:</p>
<blockquote>
<p>se eAHaAa IVeU peAsa IVe a WrMptoHraEMa sVrHMV reWeAteUeAte. <strong>apesar de
ter</strong> se UoderAMKado UVMto WoU o adDeAto dos WoUpVtadores, essa WMeAWMa Oa
ePMste <strong>Ya UMRYares de aAos</strong>, DMsto IVe o sMHMRo de MAEorUaWoes Aao e VUa
AeWessMdade reWeAte.</p>
</blockquote>
<p>Vamos pegar outro trecho para analisarmos. <strong>Ya UMRYares de aAos</strong> se parece
muito com &ldquo;há milhares de anos&rdquo;. Dessa forma, encontramos <code>Y</code>, <code>U</code>, <code>M</code>, <code>R</code> e
<code>A</code>!</p>
<blockquote>
<p>se enHana IVem pensa IVe a WriptoHraEia sVrHiV reWentemente. apesar de ter se
moderniKado mVito Wom o adDento dos WompVtadores, essa WienWia Oa ePiste <strong>ha
milhares de anos</strong>, Disto IVe o siHilo de inEormaWoes nao e Vma neWessidade
reWente.</p>
</blockquote>
<p>Estamos quase terminando, faltam poucas letras. Seguindo esse mesmo método,
conseguimos terminar de decifrar o texto e sabemos qual a chave que foi
utilizada, lembrando que a chave neste modelo é o alfabeto permutado. Por fim,
temos o texto em claro:</p>
<blockquote>
<p>Se engana quem pensa que a criptografia surgiu recentemente. Apesar de ter se
modernizado muito com o advento dos computadores, essa ciência já existe há
milhares de anos, visto que o sigilo de informações não é uma necessidade
recente.</p>
</blockquote>
<h3 id="cifra-de-vigenère">Cifra de Vigenère</h3>
<p>Vamos supor que queiramos encriptar a frase <code>reuniaodoenigmaquartafeira</code>. É
escolhida uma chave qualquer, por exemplo, <code>K=CARRO</code>. Ela é então repetida até
atingir o tamanho da mensagem, gerando <code>CARROCARROCARROCARROCARROC</code>. Então, a
mensagem será encriptada assim: à primeira letra da mensagem (<code>R</code>) devem ser
adicionadas 2 unidades, pois a primeira letra da chave é <code>C</code>, terceira letra do
alfabeto. Então, o <code>R</code> é substituído por <code>T</code>. À segunda letra da mensagem (<code>E</code>),
0 unidades devem ser adicionadas, pois a segunda letra da chave é <code>A</code>. E assim
por diante. O resultado final é:</p>
<center><pre>
mensagem: reuniaodoenigmaquartafeira
chave:    CARROCARROCARROCARROCARROC
cifra:    TELEWCOUFSPIXDOSURIHCFVZFC
</pre></center>
<p>Qual a vantagem disso? Uma cifra feita desta maneira previne criptoanálise
sobre a frequência das letras, já que a letra que mais aparece nos textos em
português, a letra <code>a</code>, vai ser transformada em diversas letras: <code>C</code>, <code>A</code>, <code>R</code> e <code>O</code>.</p>
<p>Para facilitar nosso trabalho, usamos o &ldquo;Quadrado de Vigenère&rdquo;, que contem
todas as rotações possíveis e as suas letras correspondentes.</p>
<center>
<figure><img src="/img/posts/symmetric-encryption/vigenere-square.png" width="420">
</figure>

Quadrado ou tabela de Vigenère
</center>
<p>Mas então, podemos utilizar a Cifra de Vigenère para encriptar mensagens?  Na
verdade, <strong>não</strong>. Ela também possui uma fraqueza, a <strong>natureza repetitiva da
chave</strong>. Em 1863, <a href="https://pt.wikipedia.org/wiki/Friedrich_Kasiski">Friedrich
Kasiski</a> foi o primeiro a
publicar um ataque à Cifra de Vigenère. Ele se baseou no fato de que palavras
repetidas de um texto podem acabar sendo cifradas pela mesma parte da chave. Por
exemplo:</p>
<center>
<pre>
chave: <b>ABCDAB</b>CDABCDABCD<b>ABCDAB</b>CDABCD
texto: <b>crypto</b>isshortfor<b>crypto</b>graphy
cifra: <b>CSASTP</b>KVSIQUTGQU<b>CSASTP</b>IUAQJB
</pre>
<i> Exemplo do [Wikipedia]
    (https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher)
</i>
</center>
<p>A distância entre a repetição <strong>CSASTP</strong> é de 16 caracteres. Assim, todos os
divisores de 16 são possíveis tamanhos da chave K. Isso porque se o tamanho da
chave não fosse divisor de 16, a repetição não estaria a 16 caracteres
de distância da primeira ocorrência, já que na 16ª posição não teríamos o
primeiro elemento da chave. Então, por absurdo, ela só pode ter tamanho
<code>1, 2, 4, 8, 16</code>.</p>
<p>Caso o atacante perceba que há mais de uma repetição, ele pode utilizar o
mesmo procedimento acima, obtendo outros conjuntos de divisores. Depois, basta
calcular a intersecção entre esses conjuntos. Com isso ele sabe todos os
possíveis tamanhos de chaves.</p>
<center>
<pre>
<b>VHVS</b>SP<b>QUCE</b>MRVBVBBB<b>VHVS</b>URQGIBDUGRNICJ<b>QUCE</b>RVUAXSSR
</pre>
<i>Texto cifrado com Vigenère e mais de uma repetição visível</i>
</center>
<p>Utilizando algumas técnicas de estatística, como o <a href="https://www.nku.edu/~christensen/1402%20Friedman%20test%202.pdf">teste de
Friedman</a>, é
possível encontrar um tamanho de chave com maior probabilidade de ser o certo.</p>
<p>Após encontrado o tamanho da chave (no nosso caso, <strong>n=4</strong>), sabemos que ela é
formada pelos caracteres <strong>K1 K2 K3 K4</strong>. Assim, a cada 4 letras do texto
cifrado temos uma letra que foi cifrada pelo elemento <strong>K1</strong> da chave.  Com
isso, podemos pegar só as letras que foram cifradas por <strong>K1</strong> e fazer uma
análise de frequência nelas, bem como fizemos nas <strong>Cifras de Substituição com
Permutação do Alfabeto</strong>. Dessa maneira, podemos identificar quem é <strong>K1</strong>. O
mesmo vale para os outros elementos da chave. Após identificar alguns valores da
chave, começa a ficar mais fácil de decriptar o texto. Porém, esse método só é
valido para textos relativamente grandes</p>
<br/>
<h3 id="des-data-encryption-standard-e-aes-advanced-encryption-standard">DES (Data Encryption Standard) e AES (Advanced Encryption Standard)</h3>
<p>São algoritmos criptograficos de chave simétrica da criptografia moderna. Ambos
são baseados no operador <em>exclusive or</em>, o <strong>XOR (ou exclusivo)</strong>.</p>
<ul>
<li><code>0 XOR 0 = 0</code></li>
<li><code>0 XOR 1 = 1</code></li>
<li><code>1 XOR 0 = 1</code></li>
<li><code>1 XOR 1 = 0</code></li>
</ul>
<p>Assim, suponha que você tenha uma chave <strong>K</strong> e uma mensagem <strong>M</strong>, ambas de
mesmo tamanho. Se fizermos <strong>M XOR K</strong>, obteremos um resultado de mesmo tamanho:</p>
<center>
<pre>
mensagem: 0001010101010
chave:    1011101010100
cifra:    1010111111110
</pre>
<p><em>Note que é impossível recuperar a mensagem sem conhecer a chave</em></p>
</center>
<p>Porém, gerar chaves não determinísticas de mesmo tamanho que as mensagens é um
processo muito custoso. O que é feito é utilizar chaves menores do que o tamanho
da própria mensagem. Mas como já vimos na Cifra de Vigenère, <strong>repetir a chave
não é uma boa ideia</strong>, pois um padrão pode ser formado na mensagem cifrada.</p>
<p>Por isso, o DES e o AES possuem métodos para expandir a chave sem gerar um
padrão de repetição. Teremos então um dígito binário de chave para cada dígito
binário da mensagem. Porém, o DES utiliza uma chave muito pequena (56-bits),
facilitando um possível ataque.</p>
<ul>
<li>Em 1999, <a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard">conseguiram quebrar uma mensagem encriptada pelo DES em
aproximadamente 22h</a>.</li>
<li>Por esse motivo e outros (por exemplo, polêmicas sobre o envolvimento da NSA
no design do algoritmo, influenciando a alteração do tamanho da chave do DES de
64-bits para 56-bits com o argumento de ser necessário utilizar os outros 8-bits
como bits de paridade), o DES foi substituído.</li>
<li><a href="https://en.wikipedia.org/wiki/Brute-force_attack">Tempo para quebrar uma mensagem encriptada pelo 256-bit
AES</a>: com um poder de
processamento <strong>absurdo</strong>, de 50 supercomputadores capazes de checar <strong>10^28</strong>
chaves por segundo (cada um deles), <strong>3x10^51</strong> anos seriam necessários para
testar todas as possibilidades.</li>
</ul>
<br/>
<h3 id="decifre-me">Decifre-me!</h3>
<p>Mostre o que você aprendeu decifrando essas mensagens:
<a href="https://enigma.ic.unicamp.br/talks/simetrico/desafio.txt">https://enigma.ic.unicamp.br/talks/simetrico/desafio.txt</a></p>
<h3 id="referências">Referências</h3>
<ul>
<li>The Code Book, por Simon Singh</li>
<li>How secure is 256 bit security? [YouTube link] (<a href="https://www.youtube.com/watch?v=S9JGmA5_unY">https://www.youtube.com/watch?v=S9JGmA5_unY</a>)</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
